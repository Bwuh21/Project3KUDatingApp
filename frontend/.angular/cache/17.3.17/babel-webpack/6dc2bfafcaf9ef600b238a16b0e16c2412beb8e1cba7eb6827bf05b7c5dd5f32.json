{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet ChatListComponent = class ChatListComponent {\n  constructor(chatService, router) {\n    this.chatService = chatService;\n    this.router = router;\n    this.chats = [];\n    this.isLoading = false;\n    this.errorMessage = '';\n  }\n  ngOnInit() {\n    this.loadChats();\n  }\n  loadChats() {\n    this.isLoading = true;\n    this.errorMessage = '';\n    this.chatService.getChats().subscribe({\n      next: chats => {\n        this.chats = chats;\n        this.isLoading = false;\n      },\n      error: error => {\n        this.errorMessage = 'Failed to load conversations. Please try again.';\n        this.isLoading = false;\n      }\n    });\n  }\n  openChat(chatId) {\n    this.router.navigate(['/chat', chatId]);\n  }\n  getParticipantName(chat) {\n    return chat.participants[0]?.name || 'Unknown';\n  }\n  getParticipantImage(chat) {\n    return chat.participants[0]?.profileImage || 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=100';\n  }\n  isOnline(chat) {\n    // Mock online status - in real app, this would come from WebSocket\n    return Math.random() > 0.5;\n  }\n  formatTime(timestamp) {\n    const date = new Date(timestamp);\n    const now = new Date();\n    const diff = now.getTime() - date.getTime();\n    const minutes = Math.floor(diff / 60000);\n    const hours = Math.floor(diff / 3600000);\n    const days = Math.floor(diff / 86400000);\n    if (minutes < 60) {\n      return `${minutes}m ago`;\n    } else if (hours < 24) {\n      return `${hours}h ago`;\n    } else {\n      return `${days}d ago`;\n    }\n  }\n  goToMatches() {\n    this.router.navigate(['/matches']);\n  }\n};\nChatListComponent = __decorate([Component({\n  selector: 'app-chat-list',\n  template: `\n    <div class=\"chat-list-container\">\n      <div class=\"chat-header\">\n        <h1>Messages</h1>\n        <div class=\"chat-stats\">\n          <span class=\"stat\">{{ chats.length }} conversations</span>\n        </div>\n      </div>\n\n      <div class=\"chat-list\" *ngIf=\"chats.length > 0\">\n        <div \n          *ngFor=\"let chat of chats\" \n          class=\"chat-item\"\n          (click)=\"openChat(chat.id)\"\n        >\n          <div class=\"chat-avatar\">\n            <img \n              [src]=\"getParticipantImage(chat)\" \n              [alt]=\"getParticipantName(chat)\"\n            >\n            <div class=\"online-indicator\" *ngIf=\"isOnline(chat)\"></div>\n          </div>\n\n          <div class=\"chat-content\">\n            <div class=\"chat-header-info\">\n              <h3 class=\"participant-name\">{{ getParticipantName(chat) }}</h3>\n              <span class=\"last-message-time\" *ngIf=\"chat.lastMessage\">\n                {{ formatTime(chat.lastMessage.timestamp) }}\n              </span>\n            </div>\n            \n            <p class=\"last-message\" *ngIf=\"chat.lastMessage\">\n              {{ chat.lastMessage.content }}\n            </p>\n            \n            <div class=\"chat-meta\">\n              <span class=\"unread-count\" *ngIf=\"chat.unreadCount > 0\">\n                {{ chat.unreadCount }}\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"no-chats\" *ngIf=\"chats.length === 0 && !isLoading\">\n        <div class=\"no-chats-content\">\n          <h2>No conversations yet</h2>\n          <p>Start swiping to find your matches!</p>\n          <button class=\"btn btn-primary\" (click)=\"goToMatches()\">\n            Find Matches\n          </button>\n        </div>\n      </div>\n\n      <div class=\"loading\" *ngIf=\"isLoading\">\n        <div class=\"loading-spinner\"></div>\n        <p>Loading conversations...</p>\n      </div>\n\n      <div class=\"error-message\" *ngIf=\"errorMessage\">\n        {{ errorMessage }}\n      </div>\n    </div>\n  `,\n  styles: [`\n    .chat-list-container {\n      max-width: 800px;\n      margin: 0 auto;\n      padding: 2rem;\n    }\n\n    .chat-header {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      margin-bottom: 2rem;\n    }\n\n    .chat-header h1 {\n      color: white;\n      font-size: 2.5rem;\n    }\n\n    .chat-stats .stat {\n      background: rgba(255, 255, 255, 0.1);\n      padding: 0.5rem 1rem;\n      border-radius: 20px;\n      color: white;\n      font-size: 0.9rem;\n    }\n\n    .chat-list {\n      background: white;\n      border-radius: 20px;\n      overflow: hidden;\n      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);\n    }\n\n    .chat-item {\n      display: flex;\n      align-items: center;\n      padding: 1.5rem;\n      border-bottom: 1px solid #e9ecef;\n      cursor: pointer;\n      transition: background-color 0.3s ease;\n    }\n\n    .chat-item:hover {\n      background: #f8f9fa;\n    }\n\n    .chat-item:last-child {\n      border-bottom: none;\n    }\n\n    .chat-avatar {\n      position: relative;\n      margin-right: 1rem;\n    }\n\n    .chat-avatar img {\n      width: 60px;\n      height: 60px;\n      border-radius: 50%;\n      object-fit: cover;\n    }\n\n    .online-indicator {\n      position: absolute;\n      bottom: 2px;\n      right: 2px;\n      width: 16px;\n      height: 16px;\n      background: #28a745;\n      border: 3px solid white;\n      border-radius: 50%;\n    }\n\n    .chat-content {\n      flex: 1;\n      min-width: 0;\n    }\n\n    .chat-header-info {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      margin-bottom: 0.5rem;\n    }\n\n    .participant-name {\n      font-size: 1.1rem;\n      font-weight: 600;\n      color: #333;\n      margin: 0;\n    }\n\n    .last-message-time {\n      font-size: 0.8rem;\n      color: #6c757d;\n    }\n\n    .last-message {\n      color: #6c757d;\n      font-size: 0.9rem;\n      margin: 0;\n      white-space: nowrap;\n      overflow: hidden;\n      text-overflow: ellipsis;\n    }\n\n    .chat-meta {\n      display: flex;\n      justify-content: flex-end;\n      margin-top: 0.5rem;\n    }\n\n    .unread-count {\n      background: #ff6b6b;\n      color: white;\n      padding: 0.25rem 0.75rem;\n      border-radius: 15px;\n      font-size: 0.8rem;\n      font-weight: 600;\n    }\n\n    .no-chats {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      min-height: 400px;\n    }\n\n    .no-chats-content {\n      text-align: center;\n      background: white;\n      padding: 3rem;\n      border-radius: 20px;\n      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);\n    }\n\n    .no-chats-content h2 {\n      color: #667eea;\n      margin-bottom: 1rem;\n    }\n\n    .loading {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      justify-content: center;\n      min-height: 400px;\n      color: white;\n    }\n\n    .loading-spinner {\n      width: 50px;\n      height: 50px;\n      border: 4px solid rgba(255, 255, 255, 0.3);\n      border-top: 4px solid white;\n      border-radius: 50%;\n      animation: spin 1s linear infinite;\n      margin-bottom: 1rem;\n    }\n\n    @keyframes spin {\n      0% { transform: rotate(0deg); }\n      100% { transform: rotate(360deg); }\n    }\n\n    .error-message {\n      background: #f8d7da;\n      color: #721c24;\n      padding: 1rem;\n      border-radius: 8px;\n      text-align: center;\n    }\n  `]\n})], ChatListComponent);\nexport { ChatListComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}