{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../../../../services/chat.service\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/common\";\nfunction ChatWindowComponent_span_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ÉµÉµelementStart(0, \"span\", 15);\n    i0.ÉµÉµtext(1, \"Online\");\n    i0.ÉµÉµelementEnd();\n  }\n}\nfunction ChatWindowComponent_span_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ÉµÉµelementStart(0, \"span\", 16);\n    i0.ÉµÉµtext(1);\n    i0.ÉµÉµelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ÉµÉµnextContext();\n    i0.ÉµÉµadvance();\n    i0.ÉµÉµtextInterpolate1(\"Last seen \", ctx_r1.lastSeen, \"\");\n  }\n}\nfunction ChatWindowComponent_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ÉµÉµelementStart(0, \"div\", 17)(1, \"div\", 18)(2, \"p\");\n    i0.ÉµÉµtext(3);\n    i0.ÉµÉµelementEnd();\n    i0.ÉµÉµelementStart(4, \"span\", 19);\n    i0.ÉµÉµtext(5);\n    i0.ÉµÉµelementEnd()()();\n  }\n  if (rf & 2) {\n    const message_r3 = ctx.$implicit;\n    const ctx_r1 = i0.ÉµÉµnextContext();\n    i0.ÉµÉµclassProp(\"sent\", ctx_r1.isSentByCurrentUser(message_r3))(\"received\", !ctx_r1.isSentByCurrentUser(message_r3));\n    i0.ÉµÉµadvance(3);\n    i0.ÉµÉµtextInterpolate(message_r3.content);\n    i0.ÉµÉµadvance(2);\n    i0.ÉµÉµtextInterpolate(ctx_r1.formatMessageTime(message_r3.timestamp));\n  }\n}\nfunction ChatWindowComponent_span_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ÉµÉµelementStart(0, \"span\");\n    i0.ÉµÉµtext(1, \"Send\");\n    i0.ÉµÉµelementEnd();\n  }\n}\nfunction ChatWindowComponent_span_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ÉµÉµelementStart(0, \"span\");\n    i0.ÉµÉµtext(1, \"Sending...\");\n    i0.ÉµÉµelementEnd();\n  }\n}\nexport let ChatWindowComponent = /*#__PURE__*/(() => {\n  class ChatWindowComponent {\n    constructor(route, router, chatService, fb) {\n      this.route = route;\n      this.router = router;\n      this.chatService = chatService;\n      this.fb = fb;\n      this.messages = [];\n      this.participantName = '';\n      this.participantImage = '';\n      this.isOnline = false;\n      this.lastSeen = '';\n      this.isLoading = false;\n      this.messageForm = this.fb.group({\n        content: ['', Validators.required]\n      });\n    }\n    ngOnInit() {\n      this.chatId = +this.route.snapshot.paramMap.get('id');\n      this.loadChatData();\n      this.loadMessages();\n      this.connectToWebSocket();\n    }\n    ngOnDestroy() {\n      this.chatService.disconnect();\n      if (this.messagesSubscription) {\n        this.messagesSubscription.unsubscribe();\n      }\n    }\n    loadChatData() {\n      // Mock chat data - Diana Heart as default chatter\n      if (this.chatId === 1) {\n        this.participantName = 'Diana Heart';\n        this.participantImage = 'https://images.unsplash.com/photo-1494790108755-2616b612b786?w=100';\n        this.isOnline = true;\n        this.lastSeen = 'Online now';\n      } else {\n        this.participantName = 'Alex Johnson';\n        this.participantImage = 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=100';\n        this.isOnline = Math.random() > 0.5;\n        this.lastSeen = '2 hours ago';\n      }\n    }\n    loadMessages() {\n      // Mock messages for Diana Heart\n      if (this.chatId === 1) {\n        this.messages = [{\n          id: 1,\n          senderId: 2,\n          receiverId: 1,\n          content: 'Hey! Welcome to JayMatch! I\\'m Diana Heart, your personal matchmaking assistant ðŸ’œ',\n          timestamp: new Date(Date.now() - 3600000),\n          isRead: true\n        }, {\n          id: 2,\n          senderId: 2,\n          receiverId: 1,\n          content: 'I\\'m here to help you find your perfect KU match! How\\'s your day going?',\n          timestamp: new Date(Date.now() - 1800000),\n          isRead: true\n        }, {\n          id: 3,\n          senderId: 2,\n          receiverId: 1,\n          content: 'Ready to start swiping? I\\'ve got some amazing profiles lined up for you! ðŸš€',\n          timestamp: new Date(),\n          isRead: false\n        }];\n      } else {\n        this.messages = [{\n          id: 1,\n          senderId: 2,\n          receiverId: 1,\n          content: 'Hey! How\\'s your day going?',\n          timestamp: new Date(Date.now() - 3600000),\n          isRead: true\n        }, {\n          id: 2,\n          senderId: 1,\n          receiverId: 2,\n          content: 'Great! Just finished my CS homework. How about you?',\n          timestamp: new Date(Date.now() - 1800000),\n          isRead: true\n        }];\n      }\n      this.scrollToBottom();\n    }\n    connectToWebSocket() {\n      this.chatService.connectToChat(this.chatId);\n      this.messagesSubscription = this.chatService.messages$.subscribe(messages => {\n        this.messages = messages;\n        this.scrollToBottom();\n      });\n    }\n    sendMessage() {\n      if (this.messageForm.valid) {\n        const content = this.messageForm.value.content;\n        this.isLoading = true;\n        this.chatService.sendMessage(this.chatId, content).subscribe({\n          next: message => {\n            this.messages.push(message);\n            this.messageForm.reset();\n            this.isLoading = false;\n            this.scrollToBottom();\n          },\n          error: error => {\n            console.error('Error sending message:', error);\n            this.isLoading = false;\n          }\n        });\n      }\n    }\n    isSentByCurrentUser(message) {\n      // Mock - in real app, compare with current user ID\n      return Math.random() > 0.5;\n    }\n    formatMessageTime(timestamp) {\n      const date = new Date(timestamp);\n      return date.toLocaleTimeString([], {\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    }\n    scrollToBottom() {\n      // Scroll to bottom of messages container\n      setTimeout(() => {\n        const container = document.querySelector('.chat-messages');\n        if (container) {\n          container.scrollTop = container.scrollHeight;\n        }\n      }, 100);\n    }\n    goBack() {\n      this.router.navigate(['/chat']);\n    }\n    static {\n      this.Éµfac = function ChatWindowComponent_Factory(t) {\n        return new (t || ChatWindowComponent)(i0.ÉµÉµdirectiveInject(i1.ActivatedRoute), i0.ÉµÉµdirectiveInject(i1.Router), i0.ÉµÉµdirectiveInject(i2.ChatService), i0.ÉµÉµdirectiveInject(i3.FormBuilder));\n      };\n    }\n    static {\n      this.Éµcmp = /*@__PURE__*/i0.ÉµÉµdefineComponent({\n        type: ChatWindowComponent,\n        selectors: [[\"app-chat-window\"]],\n        decls: 19,\n        vars: 10,\n        consts: [[\"messagesContainer\", \"\"], [1, \"chat-window-container\"], [1, \"chat-header\"], [1, \"back-btn\", 3, \"click\"], [1, \"chat-info\"], [1, \"participant-avatar\", 3, \"src\", \"alt\"], [1, \"participant-details\"], [\"class\", \"online-status\", 4, \"ngIf\"], [\"class\", \"online-status offline\", 4, \"ngIf\"], [1, \"chat-messages\"], [\"class\", \"message\", 3, \"sent\", \"received\", 4, \"ngFor\", \"ngForOf\"], [1, \"chat-input\", 3, \"ngSubmit\", \"formGroup\"], [\"type\", \"text\", \"formControlName\", \"content\", \"placeholder\", \"Type a message...\", 1, \"message-input\"], [\"type\", \"submit\", 1, \"send-btn\", 3, \"disabled\"], [4, \"ngIf\"], [1, \"online-status\"], [1, \"online-status\", \"offline\"], [1, \"message\"], [1, \"message-content\"], [1, \"message-time\"]],\n        template: function ChatWindowComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            const _r1 = i0.ÉµÉµgetCurrentView();\n            i0.ÉµÉµelementStart(0, \"div\", 1)(1, \"div\", 2)(2, \"button\", 3);\n            i0.ÉµÉµlistener(\"click\", function ChatWindowComponent_Template_button_click_2_listener() {\n              i0.ÉµÉµrestoreView(_r1);\n              return i0.ÉµÉµresetView(ctx.goBack());\n            });\n            i0.ÉµÉµtext(3, \" \\u2190 Back \");\n            i0.ÉµÉµelementEnd();\n            i0.ÉµÉµelementStart(4, \"div\", 4);\n            i0.ÉµÉµelement(5, \"img\", 5);\n            i0.ÉµÉµelementStart(6, \"div\", 6)(7, \"h3\");\n            i0.ÉµÉµtext(8);\n            i0.ÉµÉµelementEnd();\n            i0.ÉµÉµtemplate(9, ChatWindowComponent_span_9_Template, 2, 0, \"span\", 7)(10, ChatWindowComponent_span_10_Template, 2, 1, \"span\", 8);\n            i0.ÉµÉµelementEnd()()();\n            i0.ÉµÉµelementStart(11, \"div\", 9, 0);\n            i0.ÉµÉµtemplate(13, ChatWindowComponent_div_13_Template, 6, 6, \"div\", 10);\n            i0.ÉµÉµelementEnd();\n            i0.ÉµÉµelementStart(14, \"form\", 11);\n            i0.ÉµÉµlistener(\"ngSubmit\", function ChatWindowComponent_Template_form_ngSubmit_14_listener() {\n              i0.ÉµÉµrestoreView(_r1);\n              return i0.ÉµÉµresetView(ctx.sendMessage());\n            });\n            i0.ÉµÉµelement(15, \"input\", 12);\n            i0.ÉµÉµelementStart(16, \"button\", 13);\n            i0.ÉµÉµtemplate(17, ChatWindowComponent_span_17_Template, 2, 0, \"span\", 14)(18, ChatWindowComponent_span_18_Template, 2, 0, \"span\", 14);\n            i0.ÉµÉµelementEnd()()();\n          }\n          if (rf & 2) {\n            i0.ÉµÉµadvance(5);\n            i0.ÉµÉµproperty(\"src\", ctx.participantImage, i0.ÉµÉµsanitizeUrl)(\"alt\", ctx.participantName);\n            i0.ÉµÉµadvance(3);\n            i0.ÉµÉµtextInterpolate(ctx.participantName);\n            i0.ÉµÉµadvance();\n            i0.ÉµÉµproperty(\"ngIf\", ctx.isOnline);\n            i0.ÉµÉµadvance();\n            i0.ÉµÉµproperty(\"ngIf\", !ctx.isOnline);\n            i0.ÉµÉµadvance(3);\n            i0.ÉµÉµproperty(\"ngForOf\", ctx.messages);\n            i0.ÉµÉµadvance();\n            i0.ÉµÉµproperty(\"formGroup\", ctx.messageForm);\n            i0.ÉµÉµadvance(2);\n            i0.ÉµÉµproperty(\"disabled\", ctx.messageForm.invalid || ctx.isLoading);\n            i0.ÉµÉµadvance();\n            i0.ÉµÉµproperty(\"ngIf\", !ctx.isLoading);\n            i0.ÉµÉµadvance();\n            i0.ÉµÉµproperty(\"ngIf\", ctx.isLoading);\n          }\n        },\n        dependencies: [i4.NgForOf, i4.NgIf, i3.ÉµNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName],\n        styles: [\".chat-window-container[_ngcontent-%COMP%]{max-width:800px;margin:0 auto;height:calc(100vh - 120px);display:flex;flex-direction:column;background:#fff;border-radius:20px;box-shadow:0 10px 30px #0000001a;overflow:hidden}.chat-header[_ngcontent-%COMP%]{display:flex;align-items:center;padding:1rem 1.5rem;background:linear-gradient(135deg,#667eea,#764ba2);color:#fff}.back-btn[_ngcontent-%COMP%]{background:#fff3;color:#fff;border:none;padding:.5rem 1rem;border-radius:8px;cursor:pointer;margin-right:1rem;transition:background-color .3s ease}.back-btn[_ngcontent-%COMP%]:hover{background:#ffffff4d}.chat-info[_ngcontent-%COMP%]{display:flex;align-items:center;flex:1}.participant-avatar[_ngcontent-%COMP%]{width:50px;height:50px;border-radius:50%;object-fit:cover;margin-right:1rem}.participant-details[_ngcontent-%COMP%]   h3[_ngcontent-%COMP%]{margin:0;font-size:1.2rem}.online-status[_ngcontent-%COMP%]{font-size:.8rem;opacity:.8}.online-status.offline[_ngcontent-%COMP%]{opacity:.6}.chat-messages[_ngcontent-%COMP%]{flex:1;padding:1rem;overflow-y:auto;background:#f8f9fa}.message[_ngcontent-%COMP%]{margin-bottom:1rem;display:flex}.message.sent[_ngcontent-%COMP%]{justify-content:flex-end}.message.received[_ngcontent-%COMP%]{justify-content:flex-start}.message-content[_ngcontent-%COMP%]{max-width:70%;padding:.75rem 1rem;border-radius:18px;position:relative}.message.sent[_ngcontent-%COMP%]   .message-content[_ngcontent-%COMP%]{background:linear-gradient(135deg,#667eea,#764ba2);color:#fff}.message.received[_ngcontent-%COMP%]   .message-content[_ngcontent-%COMP%]{background:#fff;color:#333;box-shadow:0 2px 5px #0000001a}.message-content[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{margin:0;line-height:1.4}.message-time[_ngcontent-%COMP%]{font-size:.7rem;opacity:.7;display:block;margin-top:.25rem}.chat-input[_ngcontent-%COMP%]{display:flex;padding:1rem 1.5rem;background:#fff;border-top:1px solid #e9ecef}.message-input[_ngcontent-%COMP%]{flex:1;padding:.75rem 1rem;border:2px solid #e9ecef;border-radius:25px;font-size:1rem;outline:none;transition:border-color .3s ease}.message-input[_ngcontent-%COMP%]:focus{border-color:#667eea}.send-btn[_ngcontent-%COMP%]{margin-left:1rem;padding:.75rem 1.5rem;background:linear-gradient(135deg,#667eea,#764ba2);color:#fff;border:none;border-radius:25px;cursor:pointer;font-weight:600;transition:all .3s ease}.send-btn[_ngcontent-%COMP%]:hover:not(:disabled){transform:translateY(-2px);box-shadow:0 5px 15px #667eea4d}.send-btn[_ngcontent-%COMP%]:disabled{opacity:.6;cursor:not-allowed}@media (max-width: 768px){.chat-window-container[_ngcontent-%COMP%]{height:calc(100vh - 80px);border-radius:0}.message-content[_ngcontent-%COMP%]{max-width:85%}}\"]\n      });\n    }\n  }\n  return ChatWindowComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}