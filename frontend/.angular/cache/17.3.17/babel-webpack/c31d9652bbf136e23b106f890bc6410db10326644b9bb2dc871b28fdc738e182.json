{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ChatService = /*#__PURE__*/(() => {\n  class ChatService {\n    constructor(http) {\n      this.http = http;\n      this.API_URL = 'http://localhost:8080';\n      this.wsConnection = null;\n      this.messageSubject = new BehaviorSubject([]);\n      this.messages$ = this.messageSubject.asObservable();\n    }\n    getChats() {\n      return this.http.get(`${this.API_URL}/chat/chats`);\n    }\n    getMessages(chatId) {\n      return this.http.get(`${this.API_URL}/chat/${chatId}/messages`);\n    }\n    sendMessage(chatId, content) {\n      return this.http.post(`${this.API_URL}/chat/${chatId}/messages`, {\n        content\n      });\n    }\n    markAsRead(chatId) {\n      return this.http.post(`${this.API_URL}/chat/${chatId}/read`, {});\n    }\n    // WebSocket connection for real-time messaging\n    connectToChat(chatId) {\n      const token = localStorage.getItem('jaymatch_token');\n      this.wsConnection = new WebSocket(`ws://localhost:8080/ws/chat/${chatId}?token=${token}`);\n      this.wsConnection.onmessage = event => {\n        const message = JSON.parse(event.data);\n        const currentMessages = this.messageSubject.value;\n        this.messageSubject.next([...currentMessages, message]);\n      };\n      this.wsConnection.onclose = () => {\n        console.log('WebSocket connection closed');\n      };\n      this.wsConnection.onerror = error => {\n        console.error('WebSocket error:', error);\n      };\n    }\n    disconnect() {\n      if (this.wsConnection) {\n        this.wsConnection.close();\n        this.wsConnection = null;\n      }\n    }\n    sendWebSocketMessage(content) {\n      if (this.wsConnection && this.wsConnection.readyState === WebSocket.OPEN) {\n        this.wsConnection.send(JSON.stringify({\n          content\n        }));\n      }\n    }\n    static {\n      this.ɵfac = function ChatService_Factory(t) {\n        return new (t || ChatService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: ChatService,\n        factory: ChatService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return ChatService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}