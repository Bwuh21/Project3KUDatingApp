{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../../services/chat.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nfunction ChatListComponent_div_7_div_1_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ÉµÉµelement(0, \"div\", 21);\n  }\n}\nfunction ChatListComponent_div_7_div_1_span_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ÉµÉµelementStart(0, \"span\", 22);\n    i0.ÉµÉµtext(1);\n    i0.ÉµÉµelementEnd();\n  }\n  if (rf & 2) {\n    const chat_r2 = i0.ÉµÉµnextContext().$implicit;\n    const ctx_r2 = i0.ÉµÉµnextContext(2);\n    i0.ÉµÉµadvance();\n    i0.ÉµÉµtextInterpolate1(\" \", ctx_r2.formatTime(chat_r2.lastMessage.timestamp), \" \");\n  }\n}\nfunction ChatListComponent_div_7_div_1_p_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ÉµÉµelementStart(0, \"p\", 23);\n    i0.ÉµÉµtext(1);\n    i0.ÉµÉµelementEnd();\n  }\n  if (rf & 2) {\n    const chat_r2 = i0.ÉµÉµnextContext().$implicit;\n    i0.ÉµÉµadvance();\n    i0.ÉµÉµtextInterpolate1(\" \", chat_r2.lastMessage.content, \" \");\n  }\n}\nfunction ChatListComponent_div_7_div_1_span_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ÉµÉµelementStart(0, \"span\", 24);\n    i0.ÉµÉµtext(1);\n    i0.ÉµÉµelementEnd();\n  }\n  if (rf & 2) {\n    const chat_r2 = i0.ÉµÉµnextContext().$implicit;\n    i0.ÉµÉµadvance();\n    i0.ÉµÉµtextInterpolate1(\" \", chat_r2.unreadCount, \" \");\n  }\n}\nfunction ChatListComponent_div_7_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ÉµÉµgetCurrentView();\n    i0.ÉµÉµelementStart(0, \"div\", 10);\n    i0.ÉµÉµlistener(\"click\", function ChatListComponent_div_7_div_1_Template_div_click_0_listener() {\n      const chat_r2 = i0.ÉµÉµrestoreView(_r1).$implicit;\n      const ctx_r2 = i0.ÉµÉµnextContext(2);\n      return i0.ÉµÉµresetView(ctx_r2.openChat(chat_r2.id));\n    });\n    i0.ÉµÉµelementStart(1, \"div\", 11);\n    i0.ÉµÉµelement(2, \"img\", 12);\n    i0.ÉµÉµtemplate(3, ChatListComponent_div_7_div_1_div_3_Template, 1, 0, \"div\", 13);\n    i0.ÉµÉµelementEnd();\n    i0.ÉµÉµelementStart(4, \"div\", 14)(5, \"div\", 15)(6, \"h3\", 16);\n    i0.ÉµÉµtext(7);\n    i0.ÉµÉµelementEnd();\n    i0.ÉµÉµtemplate(8, ChatListComponent_div_7_div_1_span_8_Template, 2, 1, \"span\", 17);\n    i0.ÉµÉµelementEnd();\n    i0.ÉµÉµtemplate(9, ChatListComponent_div_7_div_1_p_9_Template, 2, 1, \"p\", 18);\n    i0.ÉµÉµelementStart(10, \"div\", 19);\n    i0.ÉµÉµtemplate(11, ChatListComponent_div_7_div_1_span_11_Template, 2, 1, \"span\", 20);\n    i0.ÉµÉµelementEnd()()();\n  }\n  if (rf & 2) {\n    const chat_r2 = ctx.$implicit;\n    const ctx_r2 = i0.ÉµÉµnextContext(2);\n    i0.ÉµÉµadvance(2);\n    i0.ÉµÉµproperty(\"src\", ctx_r2.getParticipantImage(chat_r2), i0.ÉµÉµsanitizeUrl)(\"alt\", ctx_r2.getParticipantName(chat_r2));\n    i0.ÉµÉµadvance();\n    i0.ÉµÉµproperty(\"ngIf\", ctx_r2.isOnline(chat_r2));\n    i0.ÉµÉµadvance(4);\n    i0.ÉµÉµtextInterpolate(ctx_r2.getParticipantName(chat_r2));\n    i0.ÉµÉµadvance();\n    i0.ÉµÉµproperty(\"ngIf\", chat_r2.lastMessage);\n    i0.ÉµÉµadvance();\n    i0.ÉµÉµproperty(\"ngIf\", chat_r2.lastMessage);\n    i0.ÉµÉµadvance(2);\n    i0.ÉµÉµproperty(\"ngIf\", chat_r2.unreadCount > 0);\n  }\n}\nfunction ChatListComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ÉµÉµelementStart(0, \"div\", 8);\n    i0.ÉµÉµtemplate(1, ChatListComponent_div_7_div_1_Template, 12, 7, \"div\", 9);\n    i0.ÉµÉµelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ÉµÉµnextContext();\n    i0.ÉµÉµadvance();\n    i0.ÉµÉµproperty(\"ngForOf\", ctx_r2.chats);\n  }\n}\nfunction ChatListComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ÉµÉµgetCurrentView();\n    i0.ÉµÉµelementStart(0, \"div\", 25)(1, \"div\", 26)(2, \"h2\");\n    i0.ÉµÉµtext(3, \"No conversations yet\");\n    i0.ÉµÉµelementEnd();\n    i0.ÉµÉµelementStart(4, \"p\");\n    i0.ÉµÉµtext(5, \"Start swiping to find your matches!\");\n    i0.ÉµÉµelementEnd();\n    i0.ÉµÉµelementStart(6, \"button\", 27);\n    i0.ÉµÉµlistener(\"click\", function ChatListComponent_div_8_Template_button_click_6_listener() {\n      i0.ÉµÉµrestoreView(_r4);\n      const ctx_r2 = i0.ÉµÉµnextContext();\n      return i0.ÉµÉµresetView(ctx_r2.goToMatches());\n    });\n    i0.ÉµÉµtext(7, \" Find Matches \");\n    i0.ÉµÉµelementEnd()()();\n  }\n}\nfunction ChatListComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ÉµÉµelementStart(0, \"div\", 28);\n    i0.ÉµÉµelement(1, \"div\", 29);\n    i0.ÉµÉµelementStart(2, \"p\");\n    i0.ÉµÉµtext(3, \"Loading conversations...\");\n    i0.ÉµÉµelementEnd()();\n  }\n}\nfunction ChatListComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ÉµÉµelementStart(0, \"div\", 30);\n    i0.ÉµÉµtext(1);\n    i0.ÉµÉµelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ÉµÉµnextContext();\n    i0.ÉµÉµadvance();\n    i0.ÉµÉµtextInterpolate1(\" \", ctx_r2.errorMessage, \" \");\n  }\n}\nexport let ChatListComponent = /*#__PURE__*/(() => {\n  class ChatListComponent {\n    constructor(chatService, router) {\n      this.chatService = chatService;\n      this.router = router;\n      this.chats = [];\n      this.isLoading = false;\n      this.errorMessage = '';\n    }\n    ngOnInit() {\n      this.loadChats();\n    }\n    loadChats() {\n      this.isLoading = true;\n      this.errorMessage = '';\n      // Mock chats with Diana Heart as default\n      const mockChats = [{\n        id: 1,\n        participants: [{\n          id: 2,\n          name: 'Diana Heart',\n          profileImage: 'https://images.unsplash.com/photo-1494790108755-2616b612b786?w=100'\n        }],\n        lastMessage: {\n          id: 1,\n          senderId: 2,\n          receiverId: 1,\n          content: 'Hey! How\\'s your day going? Ready to find your perfect match? ðŸ’œ',\n          timestamp: new Date(),\n          isRead: false\n        },\n        unreadCount: 1\n      }, {\n        id: 2,\n        participants: [{\n          id: 3,\n          name: 'Sarah Johnson',\n          profileImage: 'https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=100'\n        }],\n        lastMessage: {\n          id: 2,\n          senderId: 1,\n          receiverId: 3,\n          content: 'Thanks for the great conversation!',\n          timestamp: new Date(Date.now() - 3600000),\n          isRead: true\n        },\n        unreadCount: 0\n      }];\n      this.chats = mockChats;\n      this.isLoading = false;\n    }\n    openChat(chatId) {\n      this.router.navigate(['/chat', chatId]);\n    }\n    getParticipantName(chat) {\n      return chat.participants[0]?.name || 'Unknown';\n    }\n    getParticipantImage(chat) {\n      return chat.participants[0]?.profileImage || 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=100';\n    }\n    isOnline(chat) {\n      // Mock online status - in real app, this would come from WebSocket\n      return Math.random() > 0.5;\n    }\n    formatTime(timestamp) {\n      const date = new Date(timestamp);\n      const now = new Date();\n      const diff = now.getTime() - date.getTime();\n      const minutes = Math.floor(diff / 60000);\n      const hours = Math.floor(diff / 3600000);\n      const days = Math.floor(diff / 86400000);\n      if (minutes < 60) {\n        return `${minutes}m ago`;\n      } else if (hours < 24) {\n        return `${hours}h ago`;\n      } else {\n        return `${days}d ago`;\n      }\n    }\n    goToMatches() {\n      this.router.navigate(['/matches']);\n    }\n    static {\n      this.Éµfac = function ChatListComponent_Factory(t) {\n        return new (t || ChatListComponent)(i0.ÉµÉµdirectiveInject(i1.ChatService), i0.ÉµÉµdirectiveInject(i2.Router));\n      };\n    }\n    static {\n      this.Éµcmp = /*@__PURE__*/i0.ÉµÉµdefineComponent({\n        type: ChatListComponent,\n        selectors: [[\"app-chat-list\"]],\n        decls: 11,\n        vars: 5,\n        consts: [[1, \"chat-list-container\"], [1, \"chat-header\"], [1, \"chat-stats\"], [1, \"stat\"], [\"class\", \"chat-list\", 4, \"ngIf\"], [\"class\", \"no-chats\", 4, \"ngIf\"], [\"class\", \"loading\", 4, \"ngIf\"], [\"class\", \"error-message\", 4, \"ngIf\"], [1, \"chat-list\"], [\"class\", \"chat-item\", 3, \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"chat-item\", 3, \"click\"], [1, \"chat-avatar\"], [3, \"src\", \"alt\"], [\"class\", \"online-indicator\", 4, \"ngIf\"], [1, \"chat-content\"], [1, \"chat-header-info\"], [1, \"participant-name\"], [\"class\", \"last-message-time\", 4, \"ngIf\"], [\"class\", \"last-message\", 4, \"ngIf\"], [1, \"chat-meta\"], [\"class\", \"unread-count\", 4, \"ngIf\"], [1, \"online-indicator\"], [1, \"last-message-time\"], [1, \"last-message\"], [1, \"unread-count\"], [1, \"no-chats\"], [1, \"no-chats-content\"], [1, \"btn\", \"btn-primary\", 3, \"click\"], [1, \"loading\"], [1, \"loading-spinner\"], [1, \"error-message\"]],\n        template: function ChatListComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ÉµÉµelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h1\");\n            i0.ÉµÉµtext(3, \"Messages\");\n            i0.ÉµÉµelementEnd();\n            i0.ÉµÉµelementStart(4, \"div\", 2)(5, \"span\", 3);\n            i0.ÉµÉµtext(6);\n            i0.ÉµÉµelementEnd()()();\n            i0.ÉµÉµtemplate(7, ChatListComponent_div_7_Template, 2, 1, \"div\", 4)(8, ChatListComponent_div_8_Template, 8, 0, \"div\", 5)(9, ChatListComponent_div_9_Template, 4, 0, \"div\", 6)(10, ChatListComponent_div_10_Template, 2, 1, \"div\", 7);\n            i0.ÉµÉµelementEnd();\n          }\n          if (rf & 2) {\n            i0.ÉµÉµadvance(6);\n            i0.ÉµÉµtextInterpolate1(\"\", ctx.chats.length, \" conversations\");\n            i0.ÉµÉµadvance();\n            i0.ÉµÉµproperty(\"ngIf\", ctx.chats.length > 0);\n            i0.ÉµÉµadvance();\n            i0.ÉµÉµproperty(\"ngIf\", ctx.chats.length === 0 && !ctx.isLoading);\n            i0.ÉµÉµadvance();\n            i0.ÉµÉµproperty(\"ngIf\", ctx.isLoading);\n            i0.ÉµÉµadvance();\n            i0.ÉµÉµproperty(\"ngIf\", ctx.errorMessage);\n          }\n        },\n        dependencies: [i3.NgForOf, i3.NgIf],\n        styles: [\".chat-list-container[_ngcontent-%COMP%]{max-width:800px;margin:0 auto;padding:2rem}.chat-header[_ngcontent-%COMP%]{display:flex;justify-content:space-between;align-items:center;margin-bottom:2rem}.chat-header[_ngcontent-%COMP%]   h1[_ngcontent-%COMP%]{color:#fff;font-size:2.5rem}.chat-stats[_ngcontent-%COMP%]   .stat[_ngcontent-%COMP%]{background:#ffffff1a;padding:.5rem 1rem;border-radius:20px;color:#fff;font-size:.9rem}.chat-list[_ngcontent-%COMP%]{background:#fff;border-radius:20px;overflow:hidden;box-shadow:0 10px 30px #0000001a}.chat-item[_ngcontent-%COMP%]{display:flex;align-items:center;padding:1.5rem;border-bottom:1px solid #e9ecef;cursor:pointer;transition:background-color .3s ease}.chat-item[_ngcontent-%COMP%]:hover{background:#f8f9fa}.chat-item[_ngcontent-%COMP%]:last-child{border-bottom:none}.chat-avatar[_ngcontent-%COMP%]{position:relative;margin-right:1rem}.chat-avatar[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{width:60px;height:60px;border-radius:50%;object-fit:cover}.online-indicator[_ngcontent-%COMP%]{position:absolute;bottom:2px;right:2px;width:16px;height:16px;background:#28a745;border:3px solid white;border-radius:50%}.chat-content[_ngcontent-%COMP%]{flex:1;min-width:0}.chat-header-info[_ngcontent-%COMP%]{display:flex;justify-content:space-between;align-items:center;margin-bottom:.5rem}.participant-name[_ngcontent-%COMP%]{font-size:1.1rem;font-weight:600;color:#333;margin:0}.last-message-time[_ngcontent-%COMP%]{font-size:.8rem;color:#6c757d}.last-message[_ngcontent-%COMP%]{color:#6c757d;font-size:.9rem;margin:0;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.chat-meta[_ngcontent-%COMP%]{display:flex;justify-content:flex-end;margin-top:.5rem}.unread-count[_ngcontent-%COMP%]{background:#ff6b6b;color:#fff;padding:.25rem .75rem;border-radius:15px;font-size:.8rem;font-weight:600}.no-chats[_ngcontent-%COMP%]{display:flex;justify-content:center;align-items:center;min-height:400px}.no-chats-content[_ngcontent-%COMP%]{text-align:center;background:#fff;padding:3rem;border-radius:20px;box-shadow:0 10px 30px #0000001a}.no-chats-content[_ngcontent-%COMP%]   h2[_ngcontent-%COMP%]{color:#667eea;margin-bottom:1rem}.loading[_ngcontent-%COMP%]{display:flex;flex-direction:column;align-items:center;justify-content:center;min-height:400px;color:#fff}.loading-spinner[_ngcontent-%COMP%]{width:50px;height:50px;border:4px solid rgba(255,255,255,.3);border-top:4px solid white;border-radius:50%;animation:_ngcontent-%COMP%_spin 1s linear infinite;margin-bottom:1rem}@keyframes _ngcontent-%COMP%_spin{0%{transform:rotate(0)}to{transform:rotate(360deg)}}.error-message[_ngcontent-%COMP%]{background:#f8d7da;color:#721c24;padding:1rem;border-radius:8px;text-align:center}\"]\n      });\n    }\n  }\n  return ChatListComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}