{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet RegisterComponent = class RegisterComponent {\n  constructor(fb, authService, router) {\n    this.fb = fb;\n    this.authService = authService;\n    this.router = router;\n    this.isLoading = false;\n    this.errorMessage = '';\n    this.registerForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email, this.kuEmailValidator]],\n      password: ['', [Validators.required, Validators.minLength(8)]],\n      name: ['', Validators.required],\n      age: ['', [Validators.required, Validators.min(18), Validators.max(30)]],\n      year: ['', Validators.required],\n      major: ['', Validators.required]\n    });\n  }\n  kuEmailValidator(control) {\n    const email = control.value;\n    if (email && !email.endsWith('@ku.edu')) {\n      return {\n        kuEmail: true\n      };\n    }\n    return null;\n  }\n  onSubmit() {\n    if (this.registerForm.valid) {\n      this.isLoading = true;\n      this.errorMessage = '';\n      this.authService.register(this.registerForm.value).subscribe({\n        next: response => {\n          this.isLoading = false;\n          this.router.navigate(['/profile']);\n        },\n        error: error => {\n          this.isLoading = false;\n          this.errorMessage = error.error?.message || 'Registration failed. Please try again.';\n        }\n      });\n    }\n  }\n};\nRegisterComponent = __decorate([Component({\n  selector: 'app-register',\n  template: `\n    <div class=\"auth-container\">\n      <div class=\"auth-card\">\n        <div class=\"auth-header\">\n          <h1>❤️ JayMatch</h1>\n          <p class=\"subtitle\">Join the KU dating community!</p>\n        </div>\n\n        <form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\" class=\"auth-form\">\n          <div class=\"form-group\">\n            <label for=\"email\">KU Email</label>\n            <input \n              type=\"email\" \n              id=\"email\"\n              formControlName=\"email\"\n              placeholder=\"yourname@ku.edu\"\n              [class.error]=\"registerForm.get('email')?.invalid && registerForm.get('email')?.touched\"\n            >\n            <div class=\"error-message\" *ngIf=\"registerForm.get('email')?.invalid && registerForm.get('email')?.touched\">\n              <span *ngIf=\"registerForm.get('email')?.errors?.['required']\">Email is required</span>\n              <span *ngIf=\"registerForm.get('email')?.errors?.['email']\">Please enter a valid email</span>\n              <span *ngIf=\"registerForm.get('email')?.errors?.['kuEmail']\">Must be a KU email (@ku.edu)</span>\n            </div>\n          </div>\n\n          <div class=\"form-group\">\n            <label for=\"password\">Password</label>\n            <input \n              type=\"password\" \n              id=\"password\"\n              formControlName=\"password\"\n              placeholder=\"Create a strong password\"\n              [class.error]=\"registerForm.get('password')?.invalid && registerForm.get('password')?.touched\"\n            >\n            <div class=\"error-message\" *ngIf=\"registerForm.get('password')?.invalid && registerForm.get('password')?.touched\">\n              <span *ngIf=\"registerForm.get('password')?.errors?.['required']\">Password is required</span>\n              <span *ngIf=\"registerForm.get('password')?.errors?.['minlength']\">Password must be at least 8 characters</span>\n            </div>\n          </div>\n\n          <div class=\"form-group\">\n            <label for=\"name\">Full Name</label>\n            <input \n              type=\"text\" \n              id=\"name\"\n              formControlName=\"name\"\n              placeholder=\"Enter your full name\"\n              [class.error]=\"registerForm.get('name')?.invalid && registerForm.get('name')?.touched\"\n            >\n            <div class=\"error-message\" *ngIf=\"registerForm.get('name')?.invalid && registerForm.get('name')?.touched\">\n              Name is required\n            </div>\n          </div>\n\n          <div class=\"form-row\">\n            <div class=\"form-group\">\n              <label for=\"age\">Age</label>\n              <input \n                type=\"number\" \n                id=\"age\"\n                formControlName=\"age\"\n                placeholder=\"18\"\n                min=\"18\"\n                max=\"30\"\n                [class.error]=\"registerForm.get('age')?.invalid && registerForm.get('age')?.touched\"\n              >\n              <div class=\"error-message\" *ngIf=\"registerForm.get('age')?.invalid && registerForm.get('age')?.touched\">\n                Age is required (18-30)\n              </div>\n            </div>\n\n            <div class=\"form-group\">\n              <label for=\"year\">Year</label>\n              <select \n                id=\"year\"\n                formControlName=\"year\"\n                [class.error]=\"registerForm.get('year')?.invalid && registerForm.get('year')?.touched\"\n              >\n                <option value=\"\">Select year</option>\n                <option value=\"Freshman\">Freshman</option>\n                <option value=\"Sophomore\">Sophomore</option>\n                <option value=\"Junior\">Junior</option>\n                <option value=\"Senior\">Senior</option>\n                <option value=\"Graduate\">Graduate</option>\n              </select>\n              <div class=\"error-message\" *ngIf=\"registerForm.get('year')?.invalid && registerForm.get('year')?.touched\">\n                Year is required\n              </div>\n            </div>\n          </div>\n\n          <div class=\"form-group\">\n            <label for=\"major\">Major</label>\n            <input \n              type=\"text\" \n              id=\"major\"\n              formControlName=\"major\"\n              placeholder=\"e.g., Computer Science\"\n              [class.error]=\"registerForm.get('major')?.invalid && registerForm.get('major')?.touched\"\n            >\n            <div class=\"error-message\" *ngIf=\"registerForm.get('major')?.invalid && registerForm.get('major')?.touched\">\n              Major is required\n            </div>\n          </div>\n\n          <button \n            type=\"submit\" \n            class=\"btn btn-primary full-width\"\n            [disabled]=\"registerForm.invalid || isLoading\"\n          >\n            <span *ngIf=\"!isLoading\">Create Account</span>\n            <span *ngIf=\"isLoading\">Creating Account...</span>\n          </button>\n        </form>\n\n        <div class=\"auth-footer\">\n          <p>Already have an account? <a routerLink=\"/login\">Sign in</a></p>\n        </div>\n\n        <div class=\"error-alert\" *ngIf=\"errorMessage\">\n          {{ errorMessage }}\n        </div>\n      </div>\n    </div>\n  `,\n  styles: [`\n    .form-row {\n      display: grid;\n      grid-template-columns: 1fr 1fr;\n      gap: 1rem;\n    }\n\n    select {\n      width: 100%;\n      padding: 12px 16px;\n      border: 2px solid #e9ecef;\n      border-radius: 8px;\n      font-size: 16px;\n      background: white;\n      transition: border-color 0.3s ease;\n    }\n\n    select:focus {\n      outline: none;\n      border-color: #667eea;\n    }\n\n    select.error {\n      border-color: #dc3545;\n    }\n\n    @media (max-width: 480px) {\n      .form-row {\n        grid-template-columns: 1fr;\n      }\n    }\n  `]\n})], RegisterComponent);\nexport { RegisterComponent };","map":{"version":3,"names":["Component","Validators","RegisterComponent","constructor","fb","authService","router","isLoading","errorMessage","registerForm","group","email","required","kuEmailValidator","password","minLength","name","age","min","max","year","major","control","value","endsWith","kuEmail","onSubmit","valid","register","subscribe","next","response","navigate","error","message","__decorate","selector","template","styles"],"sources":["C:\\Users\\super\\Project3KUDatingApp\\frontend\\src\\app\\modules\\auth\\components\\register\\register.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { AuthService } from '../../../services/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  template: `\r\n    <div class=\"auth-container\">\r\n      <div class=\"auth-card\">\r\n        <div class=\"auth-header\">\r\n          <h1>❤️ JayMatch</h1>\r\n          <p class=\"subtitle\">Join the KU dating community!</p>\r\n        </div>\r\n\r\n        <form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\" class=\"auth-form\">\r\n          <div class=\"form-group\">\r\n            <label for=\"email\">KU Email</label>\r\n            <input \r\n              type=\"email\" \r\n              id=\"email\"\r\n              formControlName=\"email\"\r\n              placeholder=\"yourname@ku.edu\"\r\n              [class.error]=\"registerForm.get('email')?.invalid && registerForm.get('email')?.touched\"\r\n            >\r\n            <div class=\"error-message\" *ngIf=\"registerForm.get('email')?.invalid && registerForm.get('email')?.touched\">\r\n              <span *ngIf=\"registerForm.get('email')?.errors?.['required']\">Email is required</span>\r\n              <span *ngIf=\"registerForm.get('email')?.errors?.['email']\">Please enter a valid email</span>\r\n              <span *ngIf=\"registerForm.get('email')?.errors?.['kuEmail']\">Must be a KU email (@ku.edu)</span>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"form-group\">\r\n            <label for=\"password\">Password</label>\r\n            <input \r\n              type=\"password\" \r\n              id=\"password\"\r\n              formControlName=\"password\"\r\n              placeholder=\"Create a strong password\"\r\n              [class.error]=\"registerForm.get('password')?.invalid && registerForm.get('password')?.touched\"\r\n            >\r\n            <div class=\"error-message\" *ngIf=\"registerForm.get('password')?.invalid && registerForm.get('password')?.touched\">\r\n              <span *ngIf=\"registerForm.get('password')?.errors?.['required']\">Password is required</span>\r\n              <span *ngIf=\"registerForm.get('password')?.errors?.['minlength']\">Password must be at least 8 characters</span>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"form-group\">\r\n            <label for=\"name\">Full Name</label>\r\n            <input \r\n              type=\"text\" \r\n              id=\"name\"\r\n              formControlName=\"name\"\r\n              placeholder=\"Enter your full name\"\r\n              [class.error]=\"registerForm.get('name')?.invalid && registerForm.get('name')?.touched\"\r\n            >\r\n            <div class=\"error-message\" *ngIf=\"registerForm.get('name')?.invalid && registerForm.get('name')?.touched\">\r\n              Name is required\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"form-row\">\r\n            <div class=\"form-group\">\r\n              <label for=\"age\">Age</label>\r\n              <input \r\n                type=\"number\" \r\n                id=\"age\"\r\n                formControlName=\"age\"\r\n                placeholder=\"18\"\r\n                min=\"18\"\r\n                max=\"30\"\r\n                [class.error]=\"registerForm.get('age')?.invalid && registerForm.get('age')?.touched\"\r\n              >\r\n              <div class=\"error-message\" *ngIf=\"registerForm.get('age')?.invalid && registerForm.get('age')?.touched\">\r\n                Age is required (18-30)\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"form-group\">\r\n              <label for=\"year\">Year</label>\r\n              <select \r\n                id=\"year\"\r\n                formControlName=\"year\"\r\n                [class.error]=\"registerForm.get('year')?.invalid && registerForm.get('year')?.touched\"\r\n              >\r\n                <option value=\"\">Select year</option>\r\n                <option value=\"Freshman\">Freshman</option>\r\n                <option value=\"Sophomore\">Sophomore</option>\r\n                <option value=\"Junior\">Junior</option>\r\n                <option value=\"Senior\">Senior</option>\r\n                <option value=\"Graduate\">Graduate</option>\r\n              </select>\r\n              <div class=\"error-message\" *ngIf=\"registerForm.get('year')?.invalid && registerForm.get('year')?.touched\">\r\n                Year is required\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"form-group\">\r\n            <label for=\"major\">Major</label>\r\n            <input \r\n              type=\"text\" \r\n              id=\"major\"\r\n              formControlName=\"major\"\r\n              placeholder=\"e.g., Computer Science\"\r\n              [class.error]=\"registerForm.get('major')?.invalid && registerForm.get('major')?.touched\"\r\n            >\r\n            <div class=\"error-message\" *ngIf=\"registerForm.get('major')?.invalid && registerForm.get('major')?.touched\">\r\n              Major is required\r\n            </div>\r\n          </div>\r\n\r\n          <button \r\n            type=\"submit\" \r\n            class=\"btn btn-primary full-width\"\r\n            [disabled]=\"registerForm.invalid || isLoading\"\r\n          >\r\n            <span *ngIf=\"!isLoading\">Create Account</span>\r\n            <span *ngIf=\"isLoading\">Creating Account...</span>\r\n          </button>\r\n        </form>\r\n\r\n        <div class=\"auth-footer\">\r\n          <p>Already have an account? <a routerLink=\"/login\">Sign in</a></p>\r\n        </div>\r\n\r\n        <div class=\"error-alert\" *ngIf=\"errorMessage\">\r\n          {{ errorMessage }}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styles: [`\r\n    .form-row {\r\n      display: grid;\r\n      grid-template-columns: 1fr 1fr;\r\n      gap: 1rem;\r\n    }\r\n\r\n    select {\r\n      width: 100%;\r\n      padding: 12px 16px;\r\n      border: 2px solid #e9ecef;\r\n      border-radius: 8px;\r\n      font-size: 16px;\r\n      background: white;\r\n      transition: border-color 0.3s ease;\r\n    }\r\n\r\n    select:focus {\r\n      outline: none;\r\n      border-color: #667eea;\r\n    }\r\n\r\n    select.error {\r\n      border-color: #dc3545;\r\n    }\r\n\r\n    @media (max-width: 480px) {\r\n      .form-row {\r\n        grid-template-columns: 1fr;\r\n      }\r\n    }\r\n  `]\r\n})\r\nexport class RegisterComponent {\r\n  registerForm: FormGroup;\r\n  isLoading = false;\r\n  errorMessage = '';\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private authService: AuthService,\r\n    private router: Router\r\n  ) {\r\n    this.registerForm = this.fb.group({\r\n      email: ['', [Validators.required, Validators.email, this.kuEmailValidator]],\r\n      password: ['', [Validators.required, Validators.minLength(8)]],\r\n      name: ['', Validators.required],\r\n      age: ['', [Validators.required, Validators.min(18), Validators.max(30)]],\r\n      year: ['', Validators.required],\r\n      major: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  kuEmailValidator(control: any) {\r\n    const email = control.value;\r\n    if (email && !email.endsWith('@ku.edu')) {\r\n      return { kuEmail: true };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.registerForm.valid) {\r\n      this.isLoading = true;\r\n      this.errorMessage = '';\r\n\r\n      this.authService.register(this.registerForm.value).subscribe({\r\n        next: (response) => {\r\n          this.isLoading = false;\r\n          this.router.navigate(['/profile']);\r\n        },\r\n        error: (error) => {\r\n          this.isLoading = false;\r\n          this.errorMessage = error.error?.message || 'Registration failed. Please try again.';\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAAiCC,UAAU,QAAQ,gBAAgB;AAoK5D,IAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAK5BC,YACUC,EAAe,EACfC,WAAwB,EACxBC,MAAc;IAFd,KAAAF,EAAE,GAAFA,EAAE;IACF,KAAAC,WAAW,GAAXA,WAAW;IACX,KAAAC,MAAM,GAANA,MAAM;IANhB,KAAAC,SAAS,GAAG,KAAK;IACjB,KAAAC,YAAY,GAAG,EAAE;IAOf,IAAI,CAACC,YAAY,GAAG,IAAI,CAACL,EAAE,CAACM,KAAK,CAAC;MAChCC,KAAK,EAAE,CAAC,EAAE,EAAE,CAACV,UAAU,CAACW,QAAQ,EAAEX,UAAU,CAACU,KAAK,EAAE,IAAI,CAACE,gBAAgB,CAAC,CAAC;MAC3EC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACb,UAAU,CAACW,QAAQ,EAAEX,UAAU,CAACc,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;MAC9DC,IAAI,EAAE,CAAC,EAAE,EAAEf,UAAU,CAACW,QAAQ,CAAC;MAC/BK,GAAG,EAAE,CAAC,EAAE,EAAE,CAAChB,UAAU,CAACW,QAAQ,EAAEX,UAAU,CAACiB,GAAG,CAAC,EAAE,CAAC,EAAEjB,UAAU,CAACkB,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;MACxEC,IAAI,EAAE,CAAC,EAAE,EAAEnB,UAAU,CAACW,QAAQ,CAAC;MAC/BS,KAAK,EAAE,CAAC,EAAE,EAAEpB,UAAU,CAACW,QAAQ;KAChC,CAAC;EACJ;EAEAC,gBAAgBA,CAACS,OAAY;IAC3B,MAAMX,KAAK,GAAGW,OAAO,CAACC,KAAK;IAC3B,IAAIZ,KAAK,IAAI,CAACA,KAAK,CAACa,QAAQ,CAAC,SAAS,CAAC,EAAE;MACvC,OAAO;QAAEC,OAAO,EAAE;MAAI,CAAE;;IAE1B,OAAO,IAAI;EACb;EAEAC,QAAQA,CAAA;IACN,IAAI,IAAI,CAACjB,YAAY,CAACkB,KAAK,EAAE;MAC3B,IAAI,CAACpB,SAAS,GAAG,IAAI;MACrB,IAAI,CAACC,YAAY,GAAG,EAAE;MAEtB,IAAI,CAACH,WAAW,CAACuB,QAAQ,CAAC,IAAI,CAACnB,YAAY,CAACc,KAAK,CAAC,CAACM,SAAS,CAAC;QAC3DC,IAAI,EAAGC,QAAQ,IAAI;UACjB,IAAI,CAACxB,SAAS,GAAG,KAAK;UACtB,IAAI,CAACD,MAAM,CAAC0B,QAAQ,CAAC,CAAC,UAAU,CAAC,CAAC;QACpC,CAAC;QACDC,KAAK,EAAGA,KAAK,IAAI;UACf,IAAI,CAAC1B,SAAS,GAAG,KAAK;UACtB,IAAI,CAACC,YAAY,GAAGyB,KAAK,CAACA,KAAK,EAAEC,OAAO,IAAI,wCAAwC;QACtF;OACD,CAAC;;EAEN;CACD;AA7CYhC,iBAAiB,GAAAiC,UAAA,EAhK7BnC,SAAS,CAAC;EACToC,QAAQ,EAAE,cAAc;EACxBC,QAAQ,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4HT;EACDC,MAAM,EAAE,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA+BR;CACF,CAAC,C,EACWpC,iBAAiB,CA6C7B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}