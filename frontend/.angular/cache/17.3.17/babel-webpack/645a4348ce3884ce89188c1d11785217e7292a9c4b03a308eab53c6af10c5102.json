{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet MfaComponent = class MfaComponent {\n  constructor(fb, authService, router) {\n    this.fb = fb;\n    this.authService = authService;\n    this.router = router;\n    this.isLoading = false;\n    this.errorMessage = '';\n    this.successMessage = '';\n    this.email = '';\n    this.mfaForm = this.fb.group({\n      code: ['', [Validators.required, Validators.minLength(6), Validators.maxLength(6)]]\n    });\n    // Get email from state or localStorage\n    this.email = localStorage.getItem('pending_email') || '';\n    if (!this.email) {\n      this.router.navigate(['/login']);\n    }\n  }\n  onSubmit() {\n    if (this.mfaForm.valid) {\n      this.isLoading = true;\n      this.errorMessage = '';\n      this.authService.verifyMFACode(this.email, this.mfaForm.value.code).subscribe({\n        next: response => {\n          this.isLoading = false;\n          localStorage.removeItem('pending_email');\n          this.router.navigate(['/matches']);\n        },\n        error: error => {\n          this.isLoading = false;\n          this.errorMessage = error.error?.message || 'Invalid verification code. Please try again.';\n        }\n      });\n    }\n  }\n  resendCode() {\n    this.authService.sendMFACode(this.email).subscribe({\n      next: () => {\n        this.successMessage = 'Verification code sent! Check your email.';\n        setTimeout(() => this.successMessage = '', 3000);\n      },\n      error: error => {\n        this.errorMessage = 'Failed to resend code. Please try again.';\n      }\n    });\n  }\n};\nMfaComponent = __decorate([Component({\n  selector: 'app-mfa',\n  template: `\n    <div class=\"auth-container\">\n      <div class=\"auth-card\">\n        <div class=\"auth-header\">\n          <h1>üîê Verification</h1>\n          <p class=\"subtitle\">We've sent a verification code to your KU email</p>\n        </div>\n\n        <form [formGroup]=\"mfaForm\" (ngSubmit)=\"onSubmit()\" class=\"auth-form\">\n          <div class=\"form-group\">\n            <label for=\"code\">Verification Code</label>\n            <input \n              type=\"text\" \n              id=\"code\"\n              formControlName=\"code\"\n              placeholder=\"Enter 6-digit code\"\n              maxlength=\"6\"\n              [class.error]=\"mfaForm.get('code')?.invalid && mfaForm.get('code')?.touched\"\n            >\n            <div class=\"error-message\" *ngIf=\"mfaForm.get('code')?.invalid && mfaForm.get('code')?.touched\">\n              Verification code is required\n            </div>\n          </div>\n\n          <button \n            type=\"submit\" \n            class=\"btn btn-primary full-width\"\n            [disabled]=\"mfaForm.invalid || isLoading\"\n          >\n            <span *ngIf=\"!isLoading\">Verify</span>\n            <span *ngIf=\"isLoading\">Verifying...</span>\n          </button>\n        </form>\n\n        <div class=\"auth-footer\">\n          <p>Didn't receive the code? <a (click)=\"resendCode()\" class=\"resend-link\">Resend</a></p>\n        </div>\n\n        <div class=\"error-alert\" *ngIf=\"errorMessage\">\n          {{ errorMessage }}\n        </div>\n\n        <div class=\"success-alert\" *ngIf=\"successMessage\">\n          {{ successMessage }}\n        </div>\n      </div>\n    </div>\n  `,\n  styles: [`\n    .resend-link {\n      color: #667eea;\n      text-decoration: none;\n      font-weight: 500;\n      cursor: pointer;\n    }\n\n    .resend-link:hover {\n      text-decoration: underline;\n    }\n\n    .success-alert {\n      background: #d4edda;\n      color: #155724;\n      padding: 1rem;\n      border-radius: 8px;\n      margin-top: 1rem;\n      border: 1px solid #c3e6cb;\n    }\n  `]\n})], MfaComponent);\nexport { MfaComponent };","map":{"version":3,"names":["Component","Validators","MfaComponent","constructor","fb","authService","router","isLoading","errorMessage","successMessage","email","mfaForm","group","code","required","minLength","maxLength","localStorage","getItem","navigate","onSubmit","valid","verifyMFACode","value","subscribe","next","response","removeItem","error","message","resendCode","sendMFACode","setTimeout","__decorate","selector","template","styles"],"sources":["C:\\Users\\super\\Project3KUDatingApp\\frontend\\src\\app\\modules\\auth\\components\\mfa\\mfa.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { AuthService } from '../../../services/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-mfa',\r\n  template: `\r\n    <div class=\"auth-container\">\r\n      <div class=\"auth-card\">\r\n        <div class=\"auth-header\">\r\n          <h1>üîê Verification</h1>\r\n          <p class=\"subtitle\">We've sent a verification code to your KU email</p>\r\n        </div>\r\n\r\n        <form [formGroup]=\"mfaForm\" (ngSubmit)=\"onSubmit()\" class=\"auth-form\">\r\n          <div class=\"form-group\">\r\n            <label for=\"code\">Verification Code</label>\r\n            <input \r\n              type=\"text\" \r\n              id=\"code\"\r\n              formControlName=\"code\"\r\n              placeholder=\"Enter 6-digit code\"\r\n              maxlength=\"6\"\r\n              [class.error]=\"mfaForm.get('code')?.invalid && mfaForm.get('code')?.touched\"\r\n            >\r\n            <div class=\"error-message\" *ngIf=\"mfaForm.get('code')?.invalid && mfaForm.get('code')?.touched\">\r\n              Verification code is required\r\n            </div>\r\n          </div>\r\n\r\n          <button \r\n            type=\"submit\" \r\n            class=\"btn btn-primary full-width\"\r\n            [disabled]=\"mfaForm.invalid || isLoading\"\r\n          >\r\n            <span *ngIf=\"!isLoading\">Verify</span>\r\n            <span *ngIf=\"isLoading\">Verifying...</span>\r\n          </button>\r\n        </form>\r\n\r\n        <div class=\"auth-footer\">\r\n          <p>Didn't receive the code? <a (click)=\"resendCode()\" class=\"resend-link\">Resend</a></p>\r\n        </div>\r\n\r\n        <div class=\"error-alert\" *ngIf=\"errorMessage\">\r\n          {{ errorMessage }}\r\n        </div>\r\n\r\n        <div class=\"success-alert\" *ngIf=\"successMessage\">\r\n          {{ successMessage }}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styles: [`\r\n    .resend-link {\r\n      color: #667eea;\r\n      text-decoration: none;\r\n      font-weight: 500;\r\n      cursor: pointer;\r\n    }\r\n\r\n    .resend-link:hover {\r\n      text-decoration: underline;\r\n    }\r\n\r\n    .success-alert {\r\n      background: #d4edda;\r\n      color: #155724;\r\n      padding: 1rem;\r\n      border-radius: 8px;\r\n      margin-top: 1rem;\r\n      border: 1px solid #c3e6cb;\r\n    }\r\n  `]\r\n})\r\nexport class MfaComponent {\r\n  mfaForm: FormGroup;\r\n  isLoading = false;\r\n  errorMessage = '';\r\n  successMessage = '';\r\n  email = '';\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private authService: AuthService,\r\n    private router: Router\r\n  ) {\r\n    this.mfaForm = this.fb.group({\r\n      code: ['', [Validators.required, Validators.minLength(6), Validators.maxLength(6)]]\r\n    });\r\n\r\n    // Get email from state or localStorage\r\n    this.email = localStorage.getItem('pending_email') || '';\r\n    if (!this.email) {\r\n      this.router.navigate(['/login']);\r\n    }\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.mfaForm.valid) {\r\n      this.isLoading = true;\r\n      this.errorMessage = '';\r\n\r\n      this.authService.verifyMFACode(this.email, this.mfaForm.value.code).subscribe({\r\n        next: (response) => {\r\n          this.isLoading = false;\r\n          localStorage.removeItem('pending_email');\r\n          this.router.navigate(['/matches']);\r\n        },\r\n        error: (error) => {\r\n          this.isLoading = false;\r\n          this.errorMessage = error.error?.message || 'Invalid verification code. Please try again.';\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  resendCode() {\r\n    this.authService.sendMFACode(this.email).subscribe({\r\n      next: () => {\r\n        this.successMessage = 'Verification code sent! Check your email.';\r\n        setTimeout(() => this.successMessage = '', 3000);\r\n      },\r\n      error: (error) => {\r\n        this.errorMessage = 'Failed to resend code. Please try again.';\r\n      }\r\n    });\r\n  }\r\n}\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAAiCC,UAAU,QAAQ,gBAAgB;AA4E5D,IAAMC,YAAY,GAAlB,MAAMA,YAAY;EAOvBC,YACUC,EAAe,EACfC,WAAwB,EACxBC,MAAc;IAFd,KAAAF,EAAE,GAAFA,EAAE;IACF,KAAAC,WAAW,GAAXA,WAAW;IACX,KAAAC,MAAM,GAANA,MAAM;IARhB,KAAAC,SAAS,GAAG,KAAK;IACjB,KAAAC,YAAY,GAAG,EAAE;IACjB,KAAAC,cAAc,GAAG,EAAE;IACnB,KAAAC,KAAK,GAAG,EAAE;IAOR,IAAI,CAACC,OAAO,GAAG,IAAI,CAACP,EAAE,CAACQ,KAAK,CAAC;MAC3BC,IAAI,EAAE,CAAC,EAAE,EAAE,CAACZ,UAAU,CAACa,QAAQ,EAAEb,UAAU,CAACc,SAAS,CAAC,CAAC,CAAC,EAAEd,UAAU,CAACe,SAAS,CAAC,CAAC,CAAC,CAAC;KACnF,CAAC;IAEF;IACA,IAAI,CAACN,KAAK,GAAGO,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC,IAAI,EAAE;IACxD,IAAI,CAAC,IAAI,CAACR,KAAK,EAAE;MACf,IAAI,CAACJ,MAAM,CAACa,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;;EAEpC;EAEAC,QAAQA,CAAA;IACN,IAAI,IAAI,CAACT,OAAO,CAACU,KAAK,EAAE;MACtB,IAAI,CAACd,SAAS,GAAG,IAAI;MACrB,IAAI,CAACC,YAAY,GAAG,EAAE;MAEtB,IAAI,CAACH,WAAW,CAACiB,aAAa,CAAC,IAAI,CAACZ,KAAK,EAAE,IAAI,CAACC,OAAO,CAACY,KAAK,CAACV,IAAI,CAAC,CAACW,SAAS,CAAC;QAC5EC,IAAI,EAAGC,QAAQ,IAAI;UACjB,IAAI,CAACnB,SAAS,GAAG,KAAK;UACtBU,YAAY,CAACU,UAAU,CAAC,eAAe,CAAC;UACxC,IAAI,CAACrB,MAAM,CAACa,QAAQ,CAAC,CAAC,UAAU,CAAC,CAAC;QACpC,CAAC;QACDS,KAAK,EAAGA,KAAK,IAAI;UACf,IAAI,CAACrB,SAAS,GAAG,KAAK;UACtB,IAAI,CAACC,YAAY,GAAGoB,KAAK,CAACA,KAAK,EAAEC,OAAO,IAAI,8CAA8C;QAC5F;OACD,CAAC;;EAEN;EAEAC,UAAUA,CAAA;IACR,IAAI,CAACzB,WAAW,CAAC0B,WAAW,CAAC,IAAI,CAACrB,KAAK,CAAC,CAACc,SAAS,CAAC;MACjDC,IAAI,EAAEA,CAAA,KAAK;QACT,IAAI,CAAChB,cAAc,GAAG,2CAA2C;QACjEuB,UAAU,CAAC,MAAM,IAAI,CAACvB,cAAc,GAAG,EAAE,EAAE,IAAI,CAAC;MAClD,CAAC;MACDmB,KAAK,EAAGA,KAAK,IAAI;QACf,IAAI,CAACpB,YAAY,GAAG,0CAA0C;MAChE;KACD,CAAC;EACJ;CACD;AArDYN,YAAY,GAAA+B,UAAA,EAxExBjC,SAAS,CAAC;EACTkC,QAAQ,EAAE,SAAS;EACnBC,QAAQ,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA+CT;EACDC,MAAM,EAAE,CAAC;;;;;;;;;;;;;;;;;;;;GAoBR;CACF,CAAC,C,EACWlC,YAAY,CAqDxB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}