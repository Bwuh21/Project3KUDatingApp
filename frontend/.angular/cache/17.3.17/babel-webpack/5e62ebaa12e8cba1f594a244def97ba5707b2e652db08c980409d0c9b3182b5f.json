{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet ChatWindowComponent = class ChatWindowComponent {\n  constructor(route, router, chatService, fb) {\n    this.route = route;\n    this.router = router;\n    this.chatService = chatService;\n    this.fb = fb;\n    this.messages = [];\n    this.participantName = '';\n    this.participantImage = '';\n    this.isOnline = false;\n    this.lastSeen = '';\n    this.isLoading = false;\n    this.messageForm = this.fb.group({\n      content: ['', Validators.required]\n    });\n  }\n  ngOnInit() {\n    this.chatId = +this.route.snapshot.paramMap.get('id');\n    this.loadChatData();\n    this.loadMessages();\n    this.connectToWebSocket();\n  }\n  ngOnDestroy() {\n    this.chatService.disconnect();\n    if (this.messagesSubscription) {\n      this.messagesSubscription.unsubscribe();\n    }\n  }\n  loadChatData() {\n    // Mock chat data - in real app, this would come from API\n    this.participantName = 'Alex Johnson';\n    this.participantImage = 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=100';\n    this.isOnline = Math.random() > 0.5;\n    this.lastSeen = '2 hours ago';\n  }\n  loadMessages() {\n    this.chatService.getMessages(this.chatId).subscribe({\n      next: messages => {\n        this.messages = messages;\n        this.scrollToBottom();\n      },\n      error: error => {\n        console.error('Error loading messages:', error);\n      }\n    });\n  }\n  connectToWebSocket() {\n    this.chatService.connectToChat(this.chatId);\n    this.messagesSubscription = this.chatService.messages$.subscribe(messages => {\n      this.messages = messages;\n      this.scrollToBottom();\n    });\n  }\n  sendMessage() {\n    if (this.messageForm.valid) {\n      const content = this.messageForm.value.content;\n      this.isLoading = true;\n      this.chatService.sendMessage(this.chatId, content).subscribe({\n        next: message => {\n          this.messages.push(message);\n          this.messageForm.reset();\n          this.isLoading = false;\n          this.scrollToBottom();\n        },\n        error: error => {\n          console.error('Error sending message:', error);\n          this.isLoading = false;\n        }\n      });\n    }\n  }\n  isSentByCurrentUser(message) {\n    // Mock - in real app, compare with current user ID\n    return Math.random() > 0.5;\n  }\n  formatMessageTime(timestamp) {\n    const date = new Date(timestamp);\n    return date.toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  }\n  scrollToBottom() {\n    // Scroll to bottom of messages container\n    setTimeout(() => {\n      const container = document.querySelector('.chat-messages');\n      if (container) {\n        container.scrollTop = container.scrollHeight;\n      }\n    }, 100);\n  }\n  goBack() {\n    this.router.navigate(['/chat']);\n  }\n};\nChatWindowComponent = __decorate([Component({\n  selector: 'app-chat-window',\n  template: `\n    <div class=\"chat-window-container\">\n      <div class=\"chat-header\">\n        <button class=\"back-btn\" (click)=\"goBack()\">\n          ‚Üê Back\n        </button>\n        <div class=\"chat-info\">\n          <img \n            [src]=\"participantImage\" \n            [alt]=\"participantName\"\n            class=\"participant-avatar\"\n          >\n          <div class=\"participant-details\">\n            <h3>{{ participantName }}</h3>\n            <span class=\"online-status\" *ngIf=\"isOnline\">Online</span>\n            <span class=\"online-status offline\" *ngIf=\"!isOnline\">Last seen {{ lastSeen }}</span>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"chat-messages\" #messagesContainer>\n        <div \n          *ngFor=\"let message of messages\" \n          class=\"message\"\n          [class.sent]=\"isSentByCurrentUser(message)\"\n          [class.received]=\"!isSentByCurrentUser(message)\"\n        >\n          <div class=\"message-content\">\n            <p>{{ message.content }}</p>\n            <span class=\"message-time\">{{ formatMessageTime(message.timestamp) }}</span>\n          </div>\n        </div>\n      </div>\n\n      <form [formGroup]=\"messageForm\" (ngSubmit)=\"sendMessage()\" class=\"chat-input\">\n        <input \n          type=\"text\" \n          formControlName=\"content\"\n          placeholder=\"Type a message...\"\n          class=\"message-input\"\n        >\n        <button \n          type=\"submit\" \n          class=\"send-btn\"\n          [disabled]=\"messageForm.invalid || isLoading\"\n        >\n          <span *ngIf=\"!isLoading\">Send</span>\n          <span *ngIf=\"isLoading\">Sending...</span>\n        </button>\n      </form>\n    </div>\n  `,\n  styles: [`\n    .chat-window-container {\n      max-width: 800px;\n      margin: 0 auto;\n      height: calc(100vh - 120px);\n      display: flex;\n      flex-direction: column;\n      background: white;\n      border-radius: 20px;\n      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);\n      overflow: hidden;\n    }\n\n    .chat-header {\n      display: flex;\n      align-items: center;\n      padding: 1rem 1.5rem;\n      background: linear-gradient(135deg, #667eea, #764ba2);\n      color: white;\n    }\n\n    .back-btn {\n      background: rgba(255, 255, 255, 0.2);\n      color: white;\n      border: none;\n      padding: 0.5rem 1rem;\n      border-radius: 8px;\n      cursor: pointer;\n      margin-right: 1rem;\n      transition: background-color 0.3s ease;\n    }\n\n    .back-btn:hover {\n      background: rgba(255, 255, 255, 0.3);\n    }\n\n    .chat-info {\n      display: flex;\n      align-items: center;\n      flex: 1;\n    }\n\n    .participant-avatar {\n      width: 50px;\n      height: 50px;\n      border-radius: 50%;\n      object-fit: cover;\n      margin-right: 1rem;\n    }\n\n    .participant-details h3 {\n      margin: 0;\n      font-size: 1.2rem;\n    }\n\n    .online-status {\n      font-size: 0.8rem;\n      opacity: 0.8;\n    }\n\n    .online-status.offline {\n      opacity: 0.6;\n    }\n\n    .chat-messages {\n      flex: 1;\n      padding: 1rem;\n      overflow-y: auto;\n      background: #f8f9fa;\n    }\n\n    .message {\n      margin-bottom: 1rem;\n      display: flex;\n    }\n\n    .message.sent {\n      justify-content: flex-end;\n    }\n\n    .message.received {\n      justify-content: flex-start;\n    }\n\n    .message-content {\n      max-width: 70%;\n      padding: 0.75rem 1rem;\n      border-radius: 18px;\n      position: relative;\n    }\n\n    .message.sent .message-content {\n      background: linear-gradient(135deg, #667eea, #764ba2);\n      color: white;\n    }\n\n    .message.received .message-content {\n      background: white;\n      color: #333;\n      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n    }\n\n    .message-content p {\n      margin: 0;\n      line-height: 1.4;\n    }\n\n    .message-time {\n      font-size: 0.7rem;\n      opacity: 0.7;\n      display: block;\n      margin-top: 0.25rem;\n    }\n\n    .chat-input {\n      display: flex;\n      padding: 1rem 1.5rem;\n      background: white;\n      border-top: 1px solid #e9ecef;\n    }\n\n    .message-input {\n      flex: 1;\n      padding: 0.75rem 1rem;\n      border: 2px solid #e9ecef;\n      border-radius: 25px;\n      font-size: 1rem;\n      outline: none;\n      transition: border-color 0.3s ease;\n    }\n\n    .message-input:focus {\n      border-color: #667eea;\n    }\n\n    .send-btn {\n      margin-left: 1rem;\n      padding: 0.75rem 1.5rem;\n      background: linear-gradient(135deg, #667eea, #764ba2);\n      color: white;\n      border: none;\n      border-radius: 25px;\n      cursor: pointer;\n      font-weight: 600;\n      transition: all 0.3s ease;\n    }\n\n    .send-btn:hover:not(:disabled) {\n      transform: translateY(-2px);\n      box-shadow: 0 5px 15px rgba(102, 126, 234, 0.3);\n    }\n\n    .send-btn:disabled {\n      opacity: 0.6;\n      cursor: not-allowed;\n    }\n\n    @media (max-width: 768px) {\n      .chat-window-container {\n        height: calc(100vh - 80px);\n        border-radius: 0;\n      }\n      \n      .message-content {\n        max-width: 85%;\n      }\n    }\n  `]\n})], ChatWindowComponent);\nexport { ChatWindowComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}