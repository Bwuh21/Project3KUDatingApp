{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.currentUserSubject = new BehaviorSubject(null);\n    this.currentUser$ = this.currentUserSubject.asObservable();\n    this.API_URL = 'http://localhost:8080';\n    // Check for stored token on service initialization\n    const token = localStorage.getItem('jaymatch_token');\n    const userData = localStorage.getItem('jaymatch_user');\n    if (token && userData) {\n      try {\n        const user = JSON.parse(userData);\n        this.currentUserSubject.next(user);\n      } catch (error) {\n        // If demo user data is invalid, clear it\n        this.logout();\n      }\n    } else if (token) {\n      this.validateToken();\n    }\n  }\n  login(credentials) {\n    return this.http.post(`${this.API_URL}/auth/login`, credentials).pipe(tap(response => {\n      if (response.token) {\n        localStorage.setItem('jaymatch_token', response.token);\n        this.currentUserSubject.next(response.user);\n      }\n    }));\n  }\n  register(userData) {\n    return this.http.post(`${this.API_URL}/auth/register`, userData).pipe(tap(response => {\n      if (response.token) {\n        localStorage.setItem('jaymatch_token', response.token);\n        this.currentUserSubject.next(response.user);\n      }\n    }));\n  }\n  logout() {\n    localStorage.removeItem('jaymatch_token');\n    localStorage.removeItem('jaymatch_user');\n    this.currentUserSubject.next(null);\n  }\n  isAuthenticated() {\n    const token = localStorage.getItem('jaymatch_token');\n    return !!token && token !== '';\n  }\n  getCurrentUser() {\n    return this.currentUserSubject.value;\n  }\n  validateToken() {\n    const token = localStorage.getItem('jaymatch_token');\n    if (token) {\n      this.http.get(`${this.API_URL}/auth/validate`).subscribe({\n        next: user => this.currentUserSubject.next(user),\n        error: () => this.logout()\n      });\n    }\n  }\n  // KU Email verification\n  verifyKUEmail(email) {\n    return email.endsWith('@ku.edu');\n  }\n  // Send MFA code\n  sendMFACode(email) {\n    return this.http.post(`${this.API_URL}/auth/send-mfa`, {\n      email\n    });\n  }\n  // Verify MFA code\n  verifyMFACode(email, code) {\n    return this.http.post(`${this.API_URL}/auth/verify-mfa`, {\n      email,\n      code\n    });\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","tap","AuthService","constructor","http","currentUserSubject","currentUser$","asObservable","API_URL","token","localStorage","getItem","userData","user","JSON","parse","next","error","logout","validateToken","login","credentials","post","pipe","response","setItem","register","removeItem","isAuthenticated","getCurrentUser","value","get","subscribe","verifyKUEmail","email","endsWith","sendMFACode","verifyMFACode","code","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\super\\Project3KUDatingApp\\frontend\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\n\r\nexport interface User {\r\n  id: number;\r\n  email: string;\r\n  name: string;\r\n  age: number;\r\n  major: string;\r\n  year: string;\r\n  bio: string;\r\n  interests: string[];\r\n  profileImage?: string;\r\n  isVerified: boolean;\r\n}\r\n\r\nexport interface LoginRequest {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nexport interface RegisterRequest {\r\n  email: string;\r\n  password: string;\r\n  name: string;\r\n  age: number;\r\n  major: string;\r\n  year: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private currentUserSubject = new BehaviorSubject<User | null>(null);\r\n  public currentUser$ = this.currentUserSubject.asObservable();\r\n  \r\n  private readonly API_URL = 'http://localhost:8080';\r\n\r\n  constructor(private http: HttpClient) {\r\n    // Check for stored token on service initialization\r\n    const token = localStorage.getItem('jaymatch_token');\r\n    const userData = localStorage.getItem('jaymatch_user');\r\n    \r\n    if (token && userData) {\r\n      try {\r\n        const user = JSON.parse(userData);\r\n        this.currentUserSubject.next(user);\r\n      } catch (error) {\r\n        // If demo user data is invalid, clear it\r\n        this.logout();\r\n      }\r\n    } else if (token) {\r\n      this.validateToken();\r\n    }\r\n  }\r\n\r\n  login(credentials: LoginRequest): Observable<any> {\r\n    return this.http.post(`${this.API_URL}/auth/login`, credentials).pipe(\r\n      tap((response: any) => {\r\n        if (response.token) {\r\n          localStorage.setItem('jaymatch_token', response.token);\r\n          this.currentUserSubject.next(response.user);\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  register(userData: RegisterRequest): Observable<any> {\r\n    return this.http.post(`${this.API_URL}/auth/register`, userData).pipe(\r\n      tap((response: any) => {\r\n        if (response.token) {\r\n          localStorage.setItem('jaymatch_token', response.token);\r\n          this.currentUserSubject.next(response.user);\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  logout(): void {\r\n    localStorage.removeItem('jaymatch_token');\r\n    localStorage.removeItem('jaymatch_user');\r\n    this.currentUserSubject.next(null);\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    const token = localStorage.getItem('jaymatch_token');\r\n    return !!token && token !== '';\r\n  }\r\n\r\n  getCurrentUser(): User | null {\r\n    return this.currentUserSubject.value;\r\n  }\r\n\r\n  private validateToken(): void {\r\n    const token = localStorage.getItem('jaymatch_token');\r\n    if (token) {\r\n      this.http.get(`${this.API_URL}/auth/validate`).subscribe({\r\n        next: (user: any) => this.currentUserSubject.next(user),\r\n        error: () => this.logout()\r\n      });\r\n    }\r\n  }\r\n\r\n  // KU Email verification\r\n  verifyKUEmail(email: string): boolean {\r\n    return email.endsWith('@ku.edu');\r\n  }\r\n\r\n  // Send MFA code\r\n  sendMFACode(email: string): Observable<any> {\r\n    return this.http.post(`${this.API_URL}/auth/send-mfa`, { email });\r\n  }\r\n\r\n  // Verify MFA code\r\n  verifyMFACode(email: string, code: string): Observable<any> {\r\n    return this.http.post(`${this.API_URL}/auth/verify-mfa`, { email, code });\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}