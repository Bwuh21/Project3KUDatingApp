{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ChatService {\n  constructor(http) {\n    this.http = http;\n    this.API_URL = 'http://localhost:8080';\n    this.wsConnection = null;\n    this.messageSubject = new BehaviorSubject([]);\n    this.messages$ = this.messageSubject.asObservable();\n  }\n  getChats() {\n    return this.http.get(`${this.API_URL}/chat/chats`);\n  }\n  getMessages(chatId) {\n    return this.http.get(`${this.API_URL}/chat/${chatId}/messages`);\n  }\n  sendMessage(chatId, content) {\n    return this.http.post(`${this.API_URL}/chat/${chatId}/messages`, {\n      content\n    });\n  }\n  markAsRead(chatId) {\n    return this.http.post(`${this.API_URL}/chat/${chatId}/read`, {});\n  }\n  // WebSocket connection for real-time messaging\n  connectToChat(chatId) {\n    const token = localStorage.getItem('jaymatch_token');\n    this.wsConnection = new WebSocket(`ws://localhost:8080/ws/chat/${chatId}?token=${token}`);\n    this.wsConnection.onmessage = event => {\n      const message = JSON.parse(event.data);\n      const currentMessages = this.messageSubject.value;\n      this.messageSubject.next([...currentMessages, message]);\n    };\n    this.wsConnection.onclose = () => {\n      console.log('WebSocket connection closed');\n    };\n    this.wsConnection.onerror = error => {\n      console.error('WebSocket error:', error);\n    };\n  }\n  disconnect() {\n    if (this.wsConnection) {\n      this.wsConnection.close();\n      this.wsConnection = null;\n    }\n  }\n  sendWebSocketMessage(content) {\n    if (this.wsConnection && this.wsConnection.readyState === WebSocket.OPEN) {\n      this.wsConnection.send(JSON.stringify({\n        content\n      }));\n    }\n  }\n  static {\n    this.ɵfac = function ChatService_Factory(t) {\n      return new (t || ChatService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ChatService,\n      factory: ChatService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","ChatService","constructor","http","API_URL","wsConnection","messageSubject","messages$","asObservable","getChats","get","getMessages","chatId","sendMessage","content","post","markAsRead","connectToChat","token","localStorage","getItem","WebSocket","onmessage","event","message","JSON","parse","data","currentMessages","value","next","onclose","console","log","onerror","error","disconnect","close","sendWebSocketMessage","readyState","OPEN","send","stringify","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\super\\Project3KUDatingApp\\frontend\\src\\app\\services\\chat.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\n\r\nexport interface Message {\r\n  id: number;\r\n  senderId: number;\r\n  receiverId: number;\r\n  content: string;\r\n  timestamp: Date;\r\n  isRead: boolean;\r\n}\r\n\r\nexport interface Chat {\r\n  id: number;\r\n  participants: Array<{\r\n    id: number;\r\n    name: string;\r\n    profileImage?: string;\r\n  }>;\r\n  lastMessage?: Message;\r\n  unreadCount: number;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ChatService {\r\n  private readonly API_URL = 'http://localhost:8080';\r\n  private wsConnection: WebSocket | null = null;\r\n  private messageSubject = new BehaviorSubject<Message[]>([]);\r\n  public messages$ = this.messageSubject.asObservable();\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getChats(): Observable<Chat[]> {\r\n    return this.http.get<Chat[]>(`${this.API_URL}/chat/chats`);\r\n  }\r\n\r\n  getMessages(chatId: number): Observable<Message[]> {\r\n    return this.http.get<Message[]>(`${this.API_URL}/chat/${chatId}/messages`);\r\n  }\r\n\r\n  sendMessage(chatId: number, content: string): Observable<Message> {\r\n    return this.http.post<Message>(`${this.API_URL}/chat/${chatId}/messages`, { content });\r\n  }\r\n\r\n  markAsRead(chatId: number): Observable<any> {\r\n    return this.http.post(`${this.API_URL}/chat/${chatId}/read`, {});\r\n  }\r\n\r\n  // WebSocket connection for real-time messaging\r\n  connectToChat(chatId: number): void {\r\n    const token = localStorage.getItem('jaymatch_token');\r\n    this.wsConnection = new WebSocket(`ws://localhost:8080/ws/chat/${chatId}?token=${token}`);\r\n    \r\n    this.wsConnection.onmessage = (event) => {\r\n      const message: Message = JSON.parse(event.data);\r\n      const currentMessages = this.messageSubject.value;\r\n      this.messageSubject.next([...currentMessages, message]);\r\n    };\r\n\r\n    this.wsConnection.onclose = () => {\r\n      console.log('WebSocket connection closed');\r\n    };\r\n\r\n    this.wsConnection.onerror = (error) => {\r\n      console.error('WebSocket error:', error);\r\n    };\r\n  }\r\n\r\n  disconnect(): void {\r\n    if (this.wsConnection) {\r\n      this.wsConnection.close();\r\n      this.wsConnection = null;\r\n    }\r\n  }\r\n\r\n  sendWebSocketMessage(content: string): void {\r\n    if (this.wsConnection && this.wsConnection.readyState === WebSocket.OPEN) {\r\n      this.wsConnection.send(JSON.stringify({ content }));\r\n    }\r\n  }\r\n}\r\n"],"mappings":"AAEA,SAAqBA,eAAe,QAAQ,MAAM;;;AAyBlD,OAAM,MAAOC,WAAW;EAMtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IALP,KAAAC,OAAO,GAAG,uBAAuB;IAC1C,KAAAC,YAAY,GAAqB,IAAI;IACrC,KAAAC,cAAc,GAAG,IAAIN,eAAe,CAAY,EAAE,CAAC;IACpD,KAAAO,SAAS,GAAG,IAAI,CAACD,cAAc,CAACE,YAAY,EAAE;EAEd;EAEvCC,QAAQA,CAAA;IACN,OAAO,IAAI,CAACN,IAAI,CAACO,GAAG,CAAS,GAAG,IAAI,CAACN,OAAO,aAAa,CAAC;EAC5D;EAEAO,WAAWA,CAACC,MAAc;IACxB,OAAO,IAAI,CAACT,IAAI,CAACO,GAAG,CAAY,GAAG,IAAI,CAACN,OAAO,SAASQ,MAAM,WAAW,CAAC;EAC5E;EAEAC,WAAWA,CAACD,MAAc,EAAEE,OAAe;IACzC,OAAO,IAAI,CAACX,IAAI,CAACY,IAAI,CAAU,GAAG,IAAI,CAACX,OAAO,SAASQ,MAAM,WAAW,EAAE;MAAEE;IAAO,CAAE,CAAC;EACxF;EAEAE,UAAUA,CAACJ,MAAc;IACvB,OAAO,IAAI,CAACT,IAAI,CAACY,IAAI,CAAC,GAAG,IAAI,CAACX,OAAO,SAASQ,MAAM,OAAO,EAAE,EAAE,CAAC;EAClE;EAEA;EACAK,aAAaA,CAACL,MAAc;IAC1B,MAAMM,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,gBAAgB,CAAC;IACpD,IAAI,CAACf,YAAY,GAAG,IAAIgB,SAAS,CAAC,+BAA+BT,MAAM,UAAUM,KAAK,EAAE,CAAC;IAEzF,IAAI,CAACb,YAAY,CAACiB,SAAS,GAAIC,KAAK,IAAI;MACtC,MAAMC,OAAO,GAAYC,IAAI,CAACC,KAAK,CAACH,KAAK,CAACI,IAAI,CAAC;MAC/C,MAAMC,eAAe,GAAG,IAAI,CAACtB,cAAc,CAACuB,KAAK;MACjD,IAAI,CAACvB,cAAc,CAACwB,IAAI,CAAC,CAAC,GAAGF,eAAe,EAAEJ,OAAO,CAAC,CAAC;IACzD,CAAC;IAED,IAAI,CAACnB,YAAY,CAAC0B,OAAO,GAAG,MAAK;MAC/BC,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;IAC5C,CAAC;IAED,IAAI,CAAC5B,YAAY,CAAC6B,OAAO,GAAIC,KAAK,IAAI;MACpCH,OAAO,CAACG,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;IAC1C,CAAC;EACH;EAEAC,UAAUA,CAAA;IACR,IAAI,IAAI,CAAC/B,YAAY,EAAE;MACrB,IAAI,CAACA,YAAY,CAACgC,KAAK,EAAE;MACzB,IAAI,CAAChC,YAAY,GAAG,IAAI;;EAE5B;EAEAiC,oBAAoBA,CAACxB,OAAe;IAClC,IAAI,IAAI,CAACT,YAAY,IAAI,IAAI,CAACA,YAAY,CAACkC,UAAU,KAAKlB,SAAS,CAACmB,IAAI,EAAE;MACxE,IAAI,CAACnC,YAAY,CAACoC,IAAI,CAAChB,IAAI,CAACiB,SAAS,CAAC;QAAE5B;MAAO,CAAE,CAAC,CAAC;;EAEvD;;;uBAvDWb,WAAW,EAAA0C,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAX7C,WAAW;MAAA8C,OAAA,EAAX9C,WAAW,CAAA+C,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}