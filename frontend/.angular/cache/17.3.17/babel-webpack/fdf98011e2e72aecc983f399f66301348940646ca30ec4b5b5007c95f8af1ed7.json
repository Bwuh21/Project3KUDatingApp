{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.currentUserSubject = new BehaviorSubject(null);\n      this.currentUser$ = this.currentUserSubject.asObservable();\n      this.API_URL = 'http://localhost:8080';\n      // Check for stored token on service initialization\n      const token = localStorage.getItem('jaymatch_token');\n      const userData = localStorage.getItem('jaymatch_user');\n      if (token && userData) {\n        try {\n          const user = JSON.parse(userData);\n          this.currentUserSubject.next(user);\n        } catch (error) {\n          // If demo user data is invalid, clear it\n          this.logout();\n        }\n      }\n    }\n    login(credentials) {\n      return this.http.post(`${this.API_URL}/auth/login`, credentials).pipe(tap(response => {\n        if (response.token) {\n          localStorage.setItem('jaymatch_token', response.token);\n          this.currentUserSubject.next(response.user);\n        }\n      }));\n    }\n    register(userData) {\n      return this.http.post(`${this.API_URL}/auth/register`, userData).pipe(tap(response => {\n        if (response.token) {\n          localStorage.setItem('jaymatch_token', response.token);\n          this.currentUserSubject.next(response.user);\n        }\n      }));\n    }\n    logout() {\n      localStorage.removeItem('jaymatch_token');\n      localStorage.removeItem('jaymatch_user');\n      this.currentUserSubject.next(null);\n    }\n    isAuthenticated() {\n      const token = localStorage.getItem('jaymatch_token');\n      const userData = localStorage.getItem('jaymatch_user');\n      return !!token && !!userData;\n    }\n    getCurrentUser() {\n      return this.currentUserSubject.value;\n    }\n    validateToken() {\n      const token = localStorage.getItem('jaymatch_token');\n      if (token) {\n        this.http.get(`${this.API_URL}/auth/validate`).subscribe({\n          next: user => this.currentUserSubject.next(user),\n          error: () => this.logout()\n        });\n      }\n    }\n    // KU Email verification\n    verifyKUEmail(email) {\n      return email.endsWith('@ku.edu');\n    }\n    // Send MFA code\n    sendMFACode(email) {\n      return this.http.post(`${this.API_URL}/auth/send-mfa`, {\n        email\n      });\n    }\n    // Verify MFA code\n    verifyMFACode(email, code) {\n      return this.http.post(`${this.API_URL}/auth/verify-mfa`, {\n        email,\n        code\n      });\n    }\n    static {\n      this.ɵfac = function AuthService_Factory(t) {\n        return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthService,\n        factory: AuthService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}